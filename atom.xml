<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Here_is_ZsS</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-22T03:30:38.629Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ZsS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CS61-Recursion</title>
    <link href="http://example.com/2023/10/22/4.Recursion/"/>
    <id>http://example.com/2023/10/22/4.Recursion/</id>
    <published>2023-10-22T03:30:42.607Z</published>
    <updated>2023-10-22T03:30:38.629Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Recursion"><a href="#1-Recursion" class="headerlink" title="1.Recursion"></a>1.Recursion</h1><h2 id="（1）Recursive-Functions"><a href="#（1）Recursive-Functions" class="headerlink" title="（1）Recursive Functions"></a>（1）Recursive Functions</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##Sum digits without a while statement:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> n//<span class="number">10</span>,n%<span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_sum_last,last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits(all_sum_last) + last</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">## Solving the Iteration</span></span><br><span class="line"><span class="comment">##using while:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact_iter</span>(<span class="params">n</span>):</span><br><span class="line">    total,k = <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total*k, k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line"><span class="comment">##using recursion:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fact</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * fact(n-<span class="number">1</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>The Luhn Algorithm:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">split</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x // <span class="number">10</span>, x % <span class="number">10</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">luhn_sum</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        all_but_last,last = split(n)</span><br><span class="line">        <span class="keyword">return</span> luhn_sum_double(all_but_last) + last</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">luhn_sum_double</span>(<span class="params">n</span>):</span><br><span class="line">    all_but_last,last = split(n)</span><br><span class="line">    luhn_digit = sum_digits(<span class="number">2</span>*last)</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_digit</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> luhn_sum(all_but_last) + luhn_digit</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits_iter</span>(<span class="params">n</span>):</span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n,last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br></pre></td></tr></table></figure><p>Converting Iteration to Recursion</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits_iter</span>(<span class="params">n</span>):</span><br><span class="line">    digit_sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n,last = split(n)</span><br><span class="line">        digit_sum = digit_sum + last</span><br><span class="line">    <span class="keyword">return</span> digit_sum</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_digits_rec</span>(<span class="params">n,digit_sum</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> digit_sum</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n,last = split(n)</span><br><span class="line">        <span class="keyword">return</span> sum_digits_rec(n,digit_sum +last)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="Discussion-3"><a href="#Discussion-3" class="headerlink" title="Discussion 3"></a>Discussion 3</h2><h3 id="Q-1-Recursive-Multiplication"><a href="#Q-1-Recursive-Multiplication" class="headerlink" title="Q(1) Recursive Multiplication"></a>Q(1) Recursive Multiplication</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">m, n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Takes two positive integers and returns their product using recursion.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(5, 3)</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> m + multiply(m,n-<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q-2-Recursion-Environment-Diagram"><a href="#Q-2-Recursion-Environment-Diagram" class="headerlink" title="Q(2) Recursion Environment Diagram"></a>Q(2) Recursion Environment Diagram</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rec</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">if</span> y &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x * rec(x,y - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">rec(<span class="number">3</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q-3-Find-the-Bug"><a href="#Q-3-Find-the-Bug" class="headerlink" title="Q(3) Find the Bug"></a>Q(3) Find the Bug</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">skip_mul</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the product of n * (n - 2) * (n - 4) * ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; skip_mul(5) # 5 * 3 * 1</span></span><br><span class="line"><span class="string">    15</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; skip_mul(8) # 8 * 6 * 4 * 2</span></span><br><span class="line"><span class="string">    384</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * skip_mul(n - <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Q-4-Is-Prime"><a href="#Q-4-Is-Prime" class="headerlink" title="Q(4) Is Prime"></a>Q(4) Is Prime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns True if n is a prime number and False otherwise.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(2)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(16)</span></span><br><span class="line"><span class="string">    False</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; is_prime(521)</span></span><br><span class="line"><span class="string">    True</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_all</span>(<span class="params">i</span>):</span><br><span class="line">        <span class="string">&quot;Check whether no number from i up to n evenly divides n.&quot;</span></span><br><span class="line">        <span class="keyword">if</span> i == n:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">elif</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> check_all(i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> check_all(<span class="number">2</span>)  <span class="comment">##在上面定义完def check_all()直接跳转并执行该行代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime2</span>(<span class="params">n,i=<span class="number">2</span></span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">2</span> <span class="keyword">or</span> i &gt;= <span class="built_in">int</span>(n**<span class="number">0.5</span>)+<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> n % i == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> is_prime2(n,i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="Q-5-Recursive-Hailstone"><a href="#Q-5-Recursive-Hailstone" class="headerlink" title="Q(5) Recursive Hailstone"></a>Q(5) Recursive Hailstone</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hailstone</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Print out the hailstone sequence starting at n, and return the number of elements in the sequence.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a = hailstone(10)</span></span><br><span class="line"><span class="string">    10</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    16</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; a</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b = hailstone(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; b</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + hailstone(n // <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + hailstone(<span class="number">3</span> * n + <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q（6）Merge-Numbers"><a href="#Q（6）Merge-Numbers" class="headerlink" title="Q（6）Merge Numbers"></a>Q（6）Merge Numbers</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">n1, n2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Merges two numbers by digit in decreasing order.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(31, 42)</span></span><br><span class="line"><span class="string">    4321</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge(21, 0)</span></span><br><span class="line"><span class="string">    21</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; merge (21, 31)</span></span><br><span class="line"><span class="string">    3211</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> n1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n2</span><br><span class="line">    <span class="keyword">elif</span> n2 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n1</span><br><span class="line">    <span class="keyword">elif</span> n1 % <span class="number">10</span> &lt; n2 % <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1 // <span class="number">10</span>,n2) * <span class="number">10</span> + n1 % <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> merge(n1,n2 // <span class="number">10</span>) * <span class="number">10</span> + n2 % <span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="2-Tree-Recording"><a href="#2-Tree-Recording" class="headerlink" title="2.Tree Recording"></a>2.Tree Recording</h1><h2 id="order-of-Cascade"><a href="#order-of-Cascade" class="headerlink" title="order of Cascade"></a>order of Cascade</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cascade</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        cascade(n//<span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cascade2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt;= <span class="number">10</span>:</span><br><span class="line">        cascade(n // <span class="number">10</span>)</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><h2 id="Inverse-Cascade"><a href="#Inverse-Cascade" class="headerlink" title="Inverse Cascade"></a>Inverse Cascade</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## function that prints an inverse cascade:</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_cascade</span>(<span class="params">n</span>):</span><br><span class="line">    grow(n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    shrink(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f_then_g</span>(<span class="params">f,g,n</span>):</span><br><span class="line">    <span class="keyword">if</span> n:</span><br><span class="line">        f(n)</span><br><span class="line">        g(n)</span><br><span class="line"></span><br><span class="line">grow = <span class="keyword">lambda</span> n: f_then_g(grow,<span class="built_in">print</span>,n//<span class="number">10</span>)</span><br><span class="line">shrink = <span class="keyword">lambda</span> n: f_then_g(<span class="built_in">print</span>,grow,n//<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Tree-Recursion"><a href="#Tree-Recursion" class="headerlink" title="Tree Recursion"></a>Tree Recursion</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## fiboacci</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ucb <span class="keyword">import</span> trace</span><br><span class="line"><span class="meta">@trace</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">2</span>) + fib(n-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Counting-Partitions"><a href="#Counting-Partitions" class="headerlink" title="Counting Partitions"></a>Counting Partitions</h2><p>The number of partitions of a positive integer n, using parts up to size m, is the number of ways in which n can be expressed as the sum of positive integer parts up to m in increasing order.</p><ul><li>Recursive decomposition: finding simpler instances of the problem.</li><li>Explore two possibilities:<ul><li>Use at least one 4</li><li>Don’t use any 4</li></ul></li><li>Solve two simpler problems:</li><li>count_partitions(2,4)加到4，求和数是2.</li><li>count_partitions(6,3)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Counting Partitions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_partitions</span>(<span class="params">n,m</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        with_m = count_partitions(n-m,m)</span><br><span class="line">        without_m = count_partitions(n,m-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> with_m + without_m</span><br><span class="line">    </span><br><span class="line">count_partitions(<span class="number">6</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;1-Recursion&quot;&gt;&lt;a href=&quot;#1-Recursion&quot; class=&quot;headerlink&quot; title=&quot;1.Recursion&quot;&gt;&lt;/a&gt;1.Recursion&lt;/h1&gt;&lt;h2 id=&quot;（1）R</summary>
      
    
    
    
    
    <category term="computer-science" scheme="http://example.com/tags/computer-science/"/>
    
    <category term="CS61AFall-2023" scheme="http://example.com/tags/CS61AFall-2023/"/>
    
  </entry>
  
  <entry>
    <title>Structure &amp; Interpretation of Computer Programs</title>
    <link href="http://example.com/2023/09/14/CS61A/"/>
    <id>http://example.com/2023/09/14/CS61A/</id>
    <published>2023-09-13T16:25:10.974Z</published>
    <updated>2023-09-13T16:24:49.259Z</updated>
    
    <content type="html"><![CDATA[<p>Source:<a href="https://cs61a.org/">https://cs61a.org/</a></p><span id="more"></span><blockquote><p>“世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也”</p><p>—–王安石《游褒禅山记》</p></blockquote><h2 id="1-How-to-debugged"><a href="#1-How-to-debugged" class="headerlink" title="1.How to debugged"></a>1.How to debugged</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">python -i ex.py</span><br><span class="line">python -m doctest -v ex.py</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;Generalization&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">     <span class="string">&quot;&quot;&quot;Return a function that takes one arguments K and return K + N.</span></span><br><span class="line"><span class="string">     &gt;&gt;&gt; add_three = maker_adder(3)</span></span><br><span class="line"><span class="string">     &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">     7</span></span><br><span class="line"><span class="string">     &quot;&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">     def adder(k):</span></span><br><span class="line"><span class="string">          return k+n</span></span><br><span class="line"><span class="string">     return adder</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 利用// 和 % 取每一位</span></span><br><span class="line"><span class="string">def unique_digits(n):</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span>Return the number of unique digits <span class="keyword">in</span> positive integer n.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; unique_digits(<span class="number">8675309</span>) <span class="comment"># All are unique</span></span><br><span class="line">    <span class="number">7</span></span><br><span class="line">    &gt;&gt;&gt; unique_digits(<span class="number">13173131</span>) <span class="comment"># 1, 3, and 7</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    &gt;&gt;&gt; unique_digits(<span class="number">101</span>) <span class="comment"># 0 and 1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    digits = []</span></span><br><span class="line"><span class="string">    res = 0</span></span><br><span class="line"><span class="string">    while n &gt; 0:</span></span><br><span class="line"><span class="string">        digit = n % 10</span></span><br><span class="line"><span class="string">        if digit not in digits:</span></span><br><span class="line"><span class="string">            digits.append(digit)</span></span><br><span class="line"><span class="string">            res += 1</span></span><br><span class="line"><span class="string">        n = n // 10</span></span><br><span class="line"><span class="string">    return res</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(unique_digits(13173131))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">def has_digit(n, k):</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>Returns whether k <span class="keyword">is</span> a digit <span class="keyword">in</span> n.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; has_digit(<span class="number">10</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="literal">True</span></span><br><span class="line">    &gt;&gt;&gt; has_digit(<span class="number">12</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="literal">False</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    assert k &gt;= 0 and k &lt; 10</span></span><br><span class="line"><span class="string">    digits = []</span></span><br><span class="line"><span class="string">    while n &gt; 0:</span></span><br><span class="line"><span class="string">        digit = n % 10</span></span><br><span class="line"><span class="string">        if digit not in digits:</span></span><br><span class="line"><span class="string">            digits.append(digit)</span></span><br><span class="line"><span class="string">        n = n / 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if k in digits:</span></span><br><span class="line"><span class="string">        return True</span></span><br><span class="line"><span class="string">    else:</span></span><br><span class="line"><span class="string">        return False</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h1 id="Hog-Project"><a href="#Hog-Project" class="headerlink" title="Hog-Project"></a>Hog-Project</h1><p>Rule:<br>Two palyers alternate turns trying to be the first to end a turn with at least GOAL total point, where GOAL defaults to 100.<br>On each turn, the current player chooses some number of dice to roll, up to 10.<br>That player’s score for the turn is the sum of the dice outcomes.</p><p>Some risks if a player who rolls too many dice:</p><ol><li>Sow Sad(母猪伤心): if any of the dice outcomes is a 1, the current player’s score for the turn is 1.</li><li>Boar Brawl(野猪争吵): A player who chooses to roll zero dice scores three times the absolute difference between the ten digit(十位) of the opponent’s score and the ones digit(个位) of the current player’s score, or this turns’ score is 1, whichever is higher. The ones digit refers to the rightmost digit and the tens digit refers to the second-rightmost digit. If a player’s score is a single digit, the tens digit of that player’s score is 0.</li><li>Sus Fuss(大惊小怪): We call a number sus if it has exactly 3 or 4 factors, including 1 and the number itself. If after the rolling, the current player’s number is a sus number, they gain enough points such that their score instantly increases to the next prime number.</li></ol><h1 id="5-Environments"><a href="#5-Environments" class="headerlink" title="5.Environments"></a>5.Environments</h1><h2 id="1-Environment-for-Higher-Older-Functions"><a href="#1-Environment-for-Higher-Older-Functions" class="headerlink" title="(1)Environment for Higher-Older Functions"></a>(1)Environment for Higher-Older Functions</h2><p>A function that take a function as an argument value or  returns a function as a return value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def apply_twice(f,x):</span><br><span class="line">    return f(f(x))</span><br><span class="line"></span><br><span class="line">def saquare(x):</span><br><span class="line">    return x*x</span><br></pre></td></tr></table></figure><h2 id="2-Environment-for-Nested-Definations"><a href="#2-Environment-for-Nested-Definations" class="headerlink" title="(2)Environment for Nested Definations"></a>(2)Environment for Nested Definations</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def make_adder(n):</span><br><span class="line">    def ader(k):</span><br><span class="line">        return k+n</span><br><span class="line">    return adder</span><br><span class="line"></span><br><span class="line">add_three = make_adder(3)</span><br><span class="line">result = add_three(5)</span><br></pre></td></tr></table></figure><p><img src="/pictures/image.png" alt="function environment"></p><p>How to draw an environment diagram:<br>When a function is defined:</p><ul><li>Creat a function value: func &lt;name&gt;(&lt;formal parameters&gt;) [parent&#x3D;<parent>]</li><li>Its parents is the current frame</li><li>Bind <name> to the function value in the current frame</li></ul><p>When a function is called:</p><ul><li>Add a local frame, titled with the <name> of the function being called.</li><li>Copy the parent of the function to the local frame:[parent&#x3D;<label>]</li><li>Bind the <formal parameters> to the arguments in the local frame.</li><li>Execute the body of the function in the environment that start with the local frame.</li></ul><h2 id="3-local-name"><a href="#3-local-name" class="headerlink" title="(3)local name"></a>(3)local name</h2><p><img src="/pictures/image-1.png" alt="Alt text"></p><h2 id="4-function-composition"><a href="#4-function-composition" class="headerlink" title="(4)function composition"></a>(4)function composition</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_adder</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">k</span>):</span><br><span class="line">        <span class="keyword">return</span> n + k</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x*x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">triple</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * x </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compose1</span>(<span class="params">f,g</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">h</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="keyword">return</span> f(g(x))</span><br><span class="line">    <span class="keyword">return</span> h</span><br><span class="line"></span><br><span class="line">squiple = compose1(square,triple)</span><br><span class="line">squiple(<span class="number">5</span>)</span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line">tripare = compose1(triple,square)</span><br><span class="line">tripare(<span class="number">5</span>)</span><br><span class="line"><span class="number">75</span></span><br><span class="line"></span><br><span class="line">squadder = compose1(square,make_adder(<span class="number">2</span>))</span><br><span class="line">squadder(<span class="number">3</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line">composel(square,make_adder(<span class="number">2</span>))(<span class="number">3</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Lambda-Expression"><a href="#5-Lambda-Expression" class="headerlink" title="(5)Lambda Expression"></a>(5)Lambda Expression</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">square = lambda x: x * x</span><br><span class="line">square(4)</span><br><span class="line">16</span><br><span class="line"></span><br><span class="line">(lambda x: x * x)(3)</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="6-Function-Currying"><a href="#6-Function-Currying" class="headerlink" title="(6)Function Currying"></a>(6)Function Currying</h2><p>Currying: Transforming a multi-argument function into a single-argument, higher-order function.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def make_adder(n):</span><br><span class="line">    return lambda k: k + n</span><br><span class="line"></span><br><span class="line">make_adder(2)(3)</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">add(2,3)</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def curry2(f):</span><br><span class="line">    def g(x):</span><br><span class="line">        def h(y):</span><br><span class="line">            return f(x,y)</span><br><span class="line">        return h</span><br><span class="line">    return g</span><br><span class="line"></span><br><span class="line">from operator import add</span><br><span class="line">m = curry2(add)</span><br><span class="line">add_three = m(3)</span><br><span class="line">add_three(2)</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">curry2 = lambda f: lambda x: lambda y: f(x,y)</span><br><span class="line">m = curry2(add)</span><br><span class="line">m(2)(3)</span><br><span class="line">5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Homework02"><a href="#Homework02" class="headerlink" title="Homework02"></a>Homework02</h2><h3 id="Q1product"><a href="#Q1product" class="headerlink" title="Q1product()"></a>Q1product()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def product(n, term):</span><br><span class="line">    &quot;&quot;&quot;Return the product of the first n terms in a sequence.</span><br><span class="line"></span><br><span class="line">    n: a positive integer</span><br><span class="line">    term:  a function that takes one argument to produce the term</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; product(3, identity)  # 1 * 2 * 3</span><br><span class="line">    6</span><br><span class="line">    &gt;&gt;&gt; product(5, identity)  # 1 * 2 * 3 * 4 * 5</span><br><span class="line">    120</span><br><span class="line">    &gt;&gt;&gt; product(3, square)    # 1^2 * 2^2 * 3^2</span><br><span class="line">    36</span><br><span class="line">    &gt;&gt;&gt; product(5, square)    # 1^2 * 2^2 * 3^2 * 4^2 * 5^2</span><br><span class="line">    14400</span><br><span class="line">    &gt;&gt;&gt; product(3, increment) # (1+1) * (2+1) * (3+1)</span><br><span class="line">    24</span><br><span class="line">    &gt;&gt;&gt; product(3, triple)    # 1*3 * 2*3 * 3*3</span><br><span class="line">    162</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    total = 1</span><br><span class="line">    while n:</span><br><span class="line">        temp = term(n)</span><br><span class="line">        total *= temp</span><br><span class="line">        n = n - 1</span><br><span class="line">    return total</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Q2accumulate"><a href="#Q2accumulate" class="headerlink" title="Q2accumulate()"></a>Q2accumulate()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">def accumulate(merger, start, n, term):</span><br><span class="line">    &quot;&quot;&quot;Return the result of merging the first n terms in a sequence and start.</span><br><span class="line">    The terms to be merged are term(1), term(2), ..., term(n). merger is a</span><br><span class="line">    two-argument commutative function.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; accumulate(add, 0, 5, identity)  # 0 + 1 + 2 + 3 + 4 + 5</span><br><span class="line">    15</span><br><span class="line">    &gt;&gt;&gt; accumulate(add, 11, 5, identity) # 11 + 1 + 2 + 3 + 4 + 5</span><br><span class="line">    26</span><br><span class="line">    &gt;&gt;&gt; accumulate(add, 11, 0, identity) # 11</span><br><span class="line">    11</span><br><span class="line">    &gt;&gt;&gt; accumulate(add, 11, 3, square)   # 11 + 1^2 + 2^2 + 3^2</span><br><span class="line">    25</span><br><span class="line">    &gt;&gt;&gt; accumulate(mul, 2, 3, square)    # 2 * 1^2 * 2^2 * 3^2</span><br><span class="line">    72</span><br><span class="line">    &gt;&gt;&gt; # 2 + (1^2 + 1) + (2^2 + 1) + (3^2 + 1)</span><br><span class="line">    &gt;&gt;&gt; accumulate(lambda x, y: x + y + 1, 2, 3, square)</span><br><span class="line">    19</span><br><span class="line">    &gt;&gt;&gt; # ((2 * 1^2 * 2) * 2^2 * 2) * 3^2 * 2</span><br><span class="line">    &gt;&gt;&gt; accumulate(lambda x, y: 2 * x * y, 2, 3, square)</span><br><span class="line">    576</span><br><span class="line">    &gt;&gt;&gt; accumulate(lambda x, y: (x + y) % 17, 19, 20, square)</span><br><span class="line">    16</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    total = start</span><br><span class="line">    for i in range(1,n+1):</span><br><span class="line">        temp = term(i)</span><br><span class="line">        total = merger(total,temp)</span><br><span class="line">    return total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def summation_using_accumulate(n, term):</span><br><span class="line">    &quot;&quot;&quot;Returns the sum: term(1) + ... + term(n), using accumulate.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; summation_using_accumulate(5, square)</span><br><span class="line">    55</span><br><span class="line">    &gt;&gt;&gt; summation_using_accumulate(5, triple)</span><br><span class="line">    45</span><br><span class="line">    &gt;&gt;&gt; # You aren&#x27;t expected to understand the code of this test.</span><br><span class="line">    &gt;&gt;&gt; # Check that the bodies of the functions are just return statements.</span><br><span class="line">    &gt;&gt;&gt; # If this errors, make sure you have removed the &quot;***YOUR CODE HERE***&quot;.</span><br><span class="line">    &gt;&gt;&gt; import inspect, ast</span><br><span class="line">    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(summation_using_accumulate)).body[0].body]</span><br><span class="line">    [&#x27;Expr&#x27;, &#x27;Return&#x27;]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return accumulate(add,0,n,term=term)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def product_using_accumulate(n, term):</span><br><span class="line">    &quot;&quot;&quot;Returns the product: term(1) * ... * term(n), using accumulate.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; product_using_accumulate(4, square)</span><br><span class="line">    576</span><br><span class="line">    &gt;&gt;&gt; product_using_accumulate(6, triple)</span><br><span class="line">    524880</span><br><span class="line">    &gt;&gt;&gt; # You aren&#x27;t expected to understand the code of this test.</span><br><span class="line">    &gt;&gt;&gt; # Check that the bodies of the functions are just return statements.</span><br><span class="line">    &gt;&gt;&gt; # If this errors, make sure you have removed the &quot;***YOUR CODE HERE***&quot;.</span><br><span class="line">    &gt;&gt;&gt; import inspect, ast</span><br><span class="line">    &gt;&gt;&gt; [type(x).__name__ for x in ast.parse(inspect.getsource(product_using_accumulate)).body[0].body]</span><br><span class="line">    [&#x27;Expr&#x27;, &#x27;Return&#x27;]</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return accumulate(mul,1,n,term)</span><br></pre></td></tr></table></figure><h3 id="Q3funception"><a href="#Q3funception" class="headerlink" title="Q3funception()"></a>Q3funception()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">def funception(func1, begin):</span><br><span class="line">    &quot;&quot;&quot; Takes in a function (func1) and a begin value.</span><br><span class="line">    Returns a function (func2) that will find the product of</span><br><span class="line">    func1 applied to the range of numbers from</span><br><span class="line">    begin (inclusive) to end (exclusive)</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; def increment(num):</span><br><span class="line">    ...     return num + 1</span><br><span class="line">    &gt;&gt;&gt; def double(num):</span><br><span class="line">    ...     return num * 2</span><br><span class="line">    &gt;&gt;&gt; g1 = funception(increment, 0)</span><br><span class="line">    &gt;&gt;&gt; g1(3)    # increment(0) * increment(1) * increment(2) = 1 * 2 * 3 = 6</span><br><span class="line">    6</span><br><span class="line">    &gt;&gt;&gt; g1(0)    # Returns 1 because begin &gt;= end</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; g1(-1)   # Returns 1 because begin &gt;= end</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; g2 = funception(double, 1)</span><br><span class="line">    &gt;&gt;&gt; g2(3)    # double(1) * double(2) = 2 * 4 = 8</span><br><span class="line">    8</span><br><span class="line">    &gt;&gt;&gt; g2(4)    # double(1) * double(2) * double(3) = 2 * 4 * 6 = 48</span><br><span class="line">    48</span><br><span class="line">    &gt;&gt;&gt; g3 = funception(increment, -3)</span><br><span class="line">    &gt;&gt;&gt; g3(-1)   # increment(-3) * increment(-2) = -2 * -1 = 2</span><br><span class="line">    2</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    begintemp = begin</span><br><span class="line">    def func2(end):</span><br><span class="line">        start = begintemp</span><br><span class="line">        total = 1</span><br><span class="line">        if start &gt;= end:</span><br><span class="line">            return 1</span><br><span class="line">        while True:</span><br><span class="line">            temp = func1(start)</span><br><span class="line">            total *= temp</span><br><span class="line">            start += 1</span><br><span class="line">            if start == (end):</span><br><span class="line">                break</span><br><span class="line">        return total</span><br><span class="line">    return func2</span><br></pre></td></tr></table></figure><p>attention:</p><ul><li>Through define a var(begintemp) in parent frame store the var(begin) in order to use this vlaue, through this way, we can avoid the localVar Error</li><li>When using the while, we should using True or False as a flag, and paired with a accuarcy if to break the cycle. Because it may get into a trouble, if using a var as a falg which we can’t confirm  whether it can be  assigned  to 0. And also if flag is an negetive number, the cycle will not stop, only when the flag is 0(False).</li><li>In this case, through def a function in a function and finally return a function name.</li></ul><h3 id="Q4Lambda-Math"><a href="#Q4Lambda-Math" class="headerlink" title="Q4Lambda Math"></a>Q4Lambda Math</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">def mul_by_num(num):</span><br><span class="line">    &quot;&quot;&quot;Returns a function that takes one argument and returns num</span><br><span class="line">    times that argument.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; x = mul_by_num(5)</span><br><span class="line">    &gt;&gt;&gt; y = mul_by_num(2)</span><br><span class="line">    &gt;&gt;&gt; x(3)</span><br><span class="line">    15</span><br><span class="line">    &gt;&gt;&gt; y(-4)</span><br><span class="line">    -8</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return lambda x: x * num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add_results(f1, f2):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Return a function that takes in a single variable x, and returns</span><br><span class="line">    f1(x) + f2(x). You can assume the result of f1(x) and f2(x) can be</span><br><span class="line">    added together, and they both take in one argument.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; identity = lambda x: x</span><br><span class="line">    &gt;&gt;&gt; square = lambda x: x**2</span><br><span class="line">    &gt;&gt;&gt; a1 = add_results(identity, square) # x + x^2</span><br><span class="line">    &gt;&gt;&gt; a1(4)</span><br><span class="line">    20</span><br><span class="line">    &gt;&gt;&gt; a2 = add_results(a1, identity)     # (x + x^2) + x</span><br><span class="line">    &gt;&gt;&gt; a2(4)</span><br><span class="line">    24</span><br><span class="line">    &gt;&gt;&gt; a2(5)</span><br><span class="line">    35</span><br><span class="line">    &gt;&gt;&gt; a3 = add_results(a1, a2)           # (x + x^2) + (x + x^2 + x)</span><br><span class="line">    &gt;&gt;&gt; a3(4)</span><br><span class="line">    44</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return lambda x: f1(x) + f2(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mod_maker():</span><br><span class="line">    &quot;&quot;&quot;Return a two-argument function that performs the modulo operation and</span><br><span class="line">    returns True if the numbers are divisble, and the remainder otherwise.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; mod = mod_maker()</span><br><span class="line">    &gt;&gt;&gt; mod(7, 2) # 7 % 2</span><br><span class="line">    1</span><br><span class="line">    &gt;&gt;&gt; mod(4, 8) # 4 % 8</span><br><span class="line">    4</span><br><span class="line">    &gt;&gt;&gt; mod(8,4) # 8 % 4</span><br><span class="line">    True</span><br><span class="line">    &gt;&gt;&gt; from construct_check import check</span><br><span class="line">    &gt;&gt;&gt; check(HW_SOURCE_FILE, &#x27;mod_maker&#x27;, [&#x27;If&#x27;, &#x27;IfExp&#x27;]) # no if / if-else statements</span><br><span class="line">    True</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return lambda x,y : x % y or True</span><br></pre></td></tr></table></figure><ul><li>When coding the mod_maker, I get some trouble about how to return two values utilize the Lambda.<ul><li>逻辑操作符有个有趣的特性：在不需要求职的时候操作。这么说可能比较“高深”，举个例子，表达式x and y ，需要x和y两个变量同时为真（True）的时候,结果才为真。因此如果当x变量得知是假(false)的时候，表达式就会立刻返回false，而不用去管y的变量值。这种行为称为短路逻辑（short-circuit logic）或者惰性求值（lazy evaluation），这种行为同样也应用与or操作符。如果第一个为False,or的话会立刻返回后一个判别的数字,第一个为真时会立刻返回第一个数</li></ul></li></ul><h1 id="6-Sound-Optional"><a href="#6-Sound-Optional" class="headerlink" title="6.Sound(Optional)"></a>6.Sound(Optional)</h1><h2 id="1-Sound-Example"><a href="#1-Sound-Example" class="headerlink" title="(1)Sound Example"></a>(1)Sound Example</h2><p>This lecture  mainly tell what’s the point of the high-order functions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">from wave import open</span><br><span class="line">from struct import Struct</span><br><span class="line">#struct is module about encoding integers in the format that wave file require</span><br><span class="line">from math import floor</span><br><span class="line"></span><br><span class="line">frame_rate = 11025</span><br><span class="line"></span><br><span class="line">def encode(x):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Encode float x between -1 and 1 as two bytes.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    i = int(16384 * x)</span><br><span class="line">    return Struct(&#x27;h&#x27;).pack(i)</span><br><span class="line"></span><br><span class="line">def play(sampler,name=&#x27;song.wav&#x27;,seconds=2):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Write the output of a sampler function as a wav file.</span><br><span class="line">    sampler is a function to generate a song</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    out = open(name,&#x27;wb&#x27;)</span><br><span class="line">    out.setnchannels(1)</span><br><span class="line">    out.setsampwidth(2)</span><br><span class="line">    out.setframerate(frame_rate)</span><br><span class="line">    t = 0</span><br><span class="line">    while t &lt; seconds * frame_rate:</span><br><span class="line">        sample = sampler(t)</span><br><span class="line">        out.writeframes(encode(sample))</span><br><span class="line">        t = t + 1</span><br><span class="line">    out.close()</span><br><span class="line"></span><br><span class="line">def tri(frequency,amplitude=0.3):</span><br><span class="line">    &quot;&quot;&quot;A continous triangle wave&quot;&quot;&quot;</span><br><span class="line">    period = frame_rate // frequency</span><br><span class="line">    def sampler(t):</span><br><span class="line">        saw_wave = t / period - floor(t / period + 0.5)</span><br><span class="line">        tri_wave = 2 * abs(2 * saw_wave) - 1</span><br><span class="line">        return amplitude * tri_wave</span><br><span class="line">    return sampler</span><br><span class="line"></span><br><span class="line">#ex1</span><br><span class="line"># c_freq = 261.63</span><br><span class="line"></span><br><span class="line"># c = tri(c_freq)</span><br><span class="line"># t = 0</span><br><span class="line"># while t&lt;100:</span><br><span class="line">#     print(c(t))</span><br><span class="line">#     t += 1</span><br><span class="line"></span><br><span class="line">#ex2</span><br><span class="line">c_freq, e_freq, g_freq = 261.463,329.63,392.00</span><br><span class="line">def both(f,g):</span><br><span class="line">    return lambda t: f(t)+g(t)</span><br><span class="line"></span><br><span class="line">play(both(tri(c_freq),tri(e_freq)))</span><br><span class="line"></span><br><span class="line">#ex3</span><br><span class="line">def note(f,start,end):</span><br><span class="line">    def sampler(t):</span><br><span class="line">        seconds = t / frame_rate</span><br><span class="line">        if seconds &lt; start:</span><br><span class="line">            return 0</span><br><span class="line">        elif seconds &gt; end:</span><br><span class="line">            return 0</span><br><span class="line">        else:</span><br><span class="line">            return f(t)</span><br><span class="line">    return sampler</span><br><span class="line"></span><br><span class="line">c, e = tri(c_freq),tri(e_freq)</span><br><span class="line">play(note(c,0,1/3))</span><br><span class="line">play(both(note(c,0,1/4),note(e,1/2,1)))</span><br><span class="line"></span><br><span class="line">#ex4</span><br><span class="line"># In order to make the song sound more natural</span><br><span class="line">def note(f,start,end,fade=0.01):</span><br><span class="line">    def sampler(t):</span><br><span class="line">        seconds = t / frame_rate</span><br><span class="line">        if seconds &lt; start:</span><br><span class="line">            return 0</span><br><span class="line">        elif seconds &gt; end:</span><br><span class="line">            return 0</span><br><span class="line">        elif seconds &lt; start + fade:</span><br><span class="line">            return (seconds - start) / fade * f(t)</span><br><span class="line">        elif seconds &gt; end - fade:</span><br><span class="line">            return (end - seconds) / fade * f(t)</span><br><span class="line">        else:</span><br><span class="line">            return f(t)</span><br><span class="line">    return sampler</span><br><span class="line"></span><br><span class="line">play(both(note(c,0,1/4),note(e,1/2,1)))</span><br><span class="line"></span><br><span class="line">#ex5</span><br><span class="line"></span><br><span class="line">def mario_at(ortave):</span><br><span class="line">    c,e = tri(ortave * c_freq), tri(ortave * e_freq)</span><br><span class="line">    g, low_g = tri(ortave * g_freq), tri(ortave * g_freq / 2)</span><br><span class="line">    return mario(c,e,g,low_g)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def mario(c,e,g,low_g):</span><br><span class="line">    z = 0</span><br><span class="line">    song = note(e,z,z + 1/8)</span><br><span class="line">    z += 1/8</span><br><span class="line">    song = both(song,note(e,z,z + 1/8))</span><br><span class="line">    z += 1/4</span><br><span class="line">    song = both(song,note(e,z,z + 1/8))</span><br><span class="line">    z += 1/4</span><br><span class="line">    song = both(song,note(c,z,z + 1/8))</span><br><span class="line">    z += 1/8</span><br><span class="line">    song = both(song,note(e,z,z + 1/8))</span><br><span class="line">    z += 1/4</span><br><span class="line">    song = both(song,note(g,z,z + 1/4))</span><br><span class="line">    z += 1/2</span><br><span class="line">    song = both(song,note(low_g,z,z + 1/4))</span><br><span class="line">    z += 1/2</span><br><span class="line">    return song</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">play(mario_at(1))</span><br><span class="line">play(mario_at(1/2))</span><br><span class="line">play(both(mario_at(1),mario_at(1.2)))</span><br><span class="line"></span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="Lab02"><a href="#Lab02" class="headerlink" title="Lab02"></a>Lab02</h2><h3 id="Q1What-would-python-display"><a href="#Q1What-would-python-display" class="headerlink" title="Q1What would python display?"></a>Q1What would python display?</h3><p>逻辑操作符有个有趣的特性：在不需要求职的时候操作。这么说可能比较“高深”，举个例子，表达式x and y ，需要x和y两个变量同时为真（True）的时候,结果才为真。因此如果当x变量得知是假(false)的时候，表达式就会立刻返回false，而不用去管y的变量值。这种行为称为短路逻辑（short-circuit logic）或者惰性求值（lazy evaluation），这种行为同样也应用与or操作符。如果第一个为False,or的话会立刻返回后一个判别的数字,第一个为真时会立刻返回第一个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; print(3) or &quot;&quot;</span><br><span class="line">&gt;&gt;&gt; 3</span><br><span class="line">&gt;&gt;&gt; &quot;&quot;</span><br></pre></td></tr></table></figure><h3 id="Q2-High-Order-Functions"><a href="#Q2-High-Order-Functions" class="headerlink" title="Q2 High Order Functions"></a>Q2 High Order Functions</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">def cycle(f1, f2, f3):</span><br><span class="line">    &quot;&quot;&quot;Returns a function that is itself a higher-order function.</span><br><span class="line"></span><br><span class="line">    &gt;&gt;&gt; def add1(x):</span><br><span class="line">    ...     return x + 1</span><br><span class="line">    &gt;&gt;&gt; def times2(x):</span><br><span class="line">    ...     return x * 2</span><br><span class="line">    &gt;&gt;&gt; def add3(x):</span><br><span class="line">    ...     return x + 3</span><br><span class="line">    &gt;&gt;&gt; my_cycle = cycle(add1, times2, add3)</span><br><span class="line">    &gt;&gt;&gt; identity = my_cycle(0)</span><br><span class="line">    &gt;&gt;&gt; identity(5)</span><br><span class="line">    5</span><br><span class="line">    &gt;&gt;&gt; add_one_then_double = my_cycle(2)</span><br><span class="line">    &gt;&gt;&gt; add_one_then_double(1)</span><br><span class="line">    4</span><br><span class="line">    &gt;&gt;&gt; do_all_functions = my_cycle(3)</span><br><span class="line">    &gt;&gt;&gt; do_all_functions(2)</span><br><span class="line">    9</span><br><span class="line">    &gt;&gt;&gt; do_more_than_a_cycle = my_cycle(4)</span><br><span class="line">    &gt;&gt;&gt; do_more_than_a_cycle(2)</span><br><span class="line">    10</span><br><span class="line">    &gt;&gt;&gt; do_two_cycles = my_cycle(6)</span><br><span class="line">    &gt;&gt;&gt; do_two_cycles(1)</span><br><span class="line">    19</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def g(n):</span><br><span class="line">        def h(x):</span><br><span class="line">            p = n // 3</span><br><span class="line">            q = n % 3</span><br><span class="line">            for i in range(p):</span><br><span class="line">                x = f3(f2(f1(x)))</span><br><span class="line">            if q == 0:</span><br><span class="line">                return x</span><br><span class="line">            elif q == 1:</span><br><span class="line">                return f1(x)</span><br><span class="line">            else:</span><br><span class="line">                return f2(f1(x))</span><br><span class="line">        return h</span><br></pre></td></tr></table></figure><h1 id="7-Function-Abstraction"><a href="#7-Function-Abstraction" class="headerlink" title="7.Function Abstraction"></a>7.Function Abstraction</h1><h2 id="1"><a href="#1" class="headerlink" title="(1)"></a>(1)</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Source:&lt;a href=&quot;https://cs61a.org/&quot;&gt;https://cs61a.org/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="computer-science" scheme="http://example.com/tags/computer-science/"/>
    
    <category term="Structure &amp; Interpretation of Computer Programs" scheme="http://example.com/tags/Structure-Interpretation-of-Computer-Programs/"/>
    
  </entry>
  
  <entry>
    <title>Structure &amp; Interpretation of Computer Programs1</title>
    <link href="http://example.com/2023/09/01/SICP1/"/>
    <id>http://example.com/2023/09/01/SICP1/</id>
    <published>2023-09-01T02:04:34.289Z</published>
    <updated>2023-09-13T16:27:35.629Z</updated>
    
    <content type="html"><![CDATA[<p>Source:<a href="https://cs61a.org/">https://cs61a.org/</a></p><span id="more"></span><blockquote><p>“世之奇伟、瑰怪、非常之观，常在于险远，而人之所罕至焉，故非有志者不能至也”</p><p>—–王安石《游褒禅山记》</p></blockquote><h2 id="lec1a-Overview-and-Introduction-to-LISP"><a href="#lec1a-Overview-and-Introduction-to-LISP" class="headerlink" title="lec1a  Overview and Introduction to LISP"></a>lec1a  Overview and Introduction to LISP</h2><p>the real problem comes from where we build very, very large systems, there are the techniques for controlling the complexity of these large systems.</p><p>computer science is like an abstract form of engineering, it the kind of engineering, where you ignore the constraints that are imposed by reality.</p><p>The first is a kind of abstraction is called black-box abstraction. putting something in a box, using block-box abstraction to suppress detail, in order to get away form the detail to build more big box.</p><p>how to make the square root algorithm: first we make a guess, then we improve the guess and we sort of keep improving that guess, we can try to find a fixed point of the function which takes Y to the average of X&#x2F;Y, (if we really had Y equal to the square root of X, then Y and X&#x2F;Y would be the same value) </p><h3 id="2-the-way-of-controlling-that-kind-of-complexity"><a href="#2-the-way-of-controlling-that-kind-of-complexity" class="headerlink" title="2.the way of controlling that kind of complexity"></a>2.the way of controlling that kind of complexity</h3><p>we through define a conventional interfaces.</p><p>the first one is object-oriented programming</p><p>the second one is operation on aggregates, called streams.</p><h3 id="3-Metalinguistic-Abstraction"><a href="#3-Metalinguistic-Abstraction" class="headerlink" title="3.Metalinguistic Abstraction"></a>3.Metalinguistic Abstraction</h3><p>what is the primitive elements and means of combination and means of abstraction.</p><p>make recursive definitions is a source of incredible power.</p><p>This class talk about the general catalogue of the content of this course which from three main parts block-box, the way of controlling that kind of complexity and Metalinguistic abstraction. In addition, it is mainly introduce the Lisp, which has three basic significant point, primitive element, means of combination and means of abstraction. For primitive elements we give some example like + - * &lt; &#x3D; and so on. For means of combination is () COND IF. For means of abstraction is DEFINE. </p><p>The next class is talk about how it is that you make a link between these procedures we write and the processes that happened in the machine. Using the Lisp to solve about more general conventional methods of doing things. </p><h2 id="lec1b-Procedures-and-Processes-substitution-model"><a href="#lec1b-Procedures-and-Processes-substitution-model" class="headerlink" title="lec1b Procedures and Processes &amp; substitution model"></a>lec1b Procedures and Processes &amp; substitution model</h2><p><img src="C:\Users\庄顺顺\AppData\Roaming\Typora\typora-user-images\1693557976746.png" alt="1693557976746"></p><p><img src="C:\Users\庄顺顺\AppData\Roaming\Typora\typora-user-images\1693558050240.png" alt="1693558050240"></p><p>the way to construct a recursive process is by washing thinking. </p><h2 id="lec2a-higher-order-proceduces"><a href="#lec2a-higher-order-proceduces" class="headerlink" title="lec2a higher-order proceduces"></a>lec2a higher-order proceduces</h2><p>$$<br>\sum_{a}^{b}i<br>$$</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（DEFINE (SUM-INT A B)</span><br><span class="line">    IF (&gt; a b)</span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    (+ a (SUM-INT (<span class="number">1</span>+ a) b))）</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>so we abstract the sum to get a general pattern:<br>$$<br>\sum_{a}^{b}x<br>$$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(define (&lt;name&gt; a b)</span><br><span class="line">(if (&gt; a b)</span><br><span class="line">0</span><br><span class="line">(+ (&lt;term&gt; a)</span><br><span class="line">(&lt;name&gt; (&lt;next&gt; a) b) ) )</span><br></pre></td></tr></table></figure><p>Then we talk about procedural arguments:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">##TERM and NEXT are goging to be procedures <span class="keyword">for</span> computing something given a number. TERM will be a procedure which when given an index, produce the value of the term <span class="keyword">for</span> the index. NEXT will be given an index, which will produce the next index.</span><br><span class="line"></span><br><span class="line">(DEFINE (SUM TERM A NEXT B)</span><br><span class="line">(IF (&gt; A B)</span><br><span class="line"><span class="number">0</span></span><br><span class="line">(+ (TERM A)</span><br><span class="line">(SUM TERM</span><br><span class="line"> (NEXT A)</span><br><span class="line"> NEXT</span><br><span class="line"> B))))</span><br></pre></td></tr></table></figure><p>That is procedures that take procedural arguments and produce procedural values.</p><p>The derivative is a procedure that takes a procedure (f) that computes a function as its argument, and it produces a procedure that computes a function which needs one argument x. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(DEFINE DERIV</span><br><span class="line">(lambda (f)</span><br><span class="line">(lambda (x) </span><br><span class="line">(/ (- (f (+ x dx))</span><br><span class="line">  (f x))</span><br><span class="line">dx))</span><br><span class="line">))</span><br></pre></td></tr></table></figure><h2 id="lec2b-Compound-Data"><a href="#lec2b-Compound-Data" class="headerlink" title="lec2b Compound Data"></a>lec2b Compound Data</h2><p>data abstraction is a sort of the programming methodology of setting up data objects by postulating constructors and selectors to isolate use from representation. </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Source:&lt;a href=&quot;https://cs61a.org/&quot;&gt;https://cs61a.org/&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="computer-science" scheme="http://example.com/tags/computer-science/"/>
    
    <category term="Structure &amp; Interpretation of Computer Programs" scheme="http://example.com/tags/Structure-Interpretation-of-Computer-Programs/"/>
    
  </entry>
  
  <entry>
    <title>The speech of Steve Jobs</title>
    <link href="http://example.com/2018/11/11/%E6%BC%94%E8%AE%B2%E7%A8%BF/"/>
    <id>http://example.com/2018/11/11/%E6%BC%94%E8%AE%B2%E7%A8%BF/</id>
    <published>2018-11-11T04:00:00.000Z</published>
    <updated>2023-08-30T03:18:08.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="The-speech-of-Steve-Jobs"><a href="#The-speech-of-Steve-Jobs" class="headerlink" title="The speech of Steve Jobs"></a>The speech of Steve Jobs</h1><p>this is used to learn English</p><span id="more"></span><p>I am honored to be with you today at your commencement from one of the finest universities in the world. Truth be told, I never graduated from college, and this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories.</p><p>我今天很荣幸能和你们一起参加毕业典礼，斯坦福大学是世界上最好的大学之一。我从来没有从大学中毕业。说实话,今天也许是在我的生命中离大学毕业最近的一天了。今天我想向你们讲述我生活中的三个故事。不是什么大不了的事情,只是三个故事而已。</p><p><strong>[1]</strong> <strong>The first story is about connecting the dots.</strong></p><p>　　<strong>第一个故事是关于如何把生命中的点点滴滴串连起来。</strong></p><p>I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out？</p><p>　　我在Reed大学读了六个月之后就退学了,但是在十八个月以后——我真正的作出退学决定之前,我还经常去学校。我为什么要退学呢？</p><p>It started before I was born. My biological mother was a young, unwed college graduate student, and she decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl.</p><p>　　故事从我出生的时候讲起。我的亲生母亲是一个年轻的,没有结婚的大学毕业生。她决定让别人收养我, 她十分想让我被大学毕业生收养。所以在我出生的时候，她已经做好了一切的准备工作，能使得我被一个律师和他的妻子所收养。但是她没有料到,当我出生之后, 律师夫妇突然决定他们想要一个女孩。</p><p>So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him？” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only relented a few months later when my parents promised that I would go to college. This was a start in my life.</p><p>　　所以我的生养父母(他们还在我亲生父母的观察名单上)突然在半夜接到了一个电话:“我们现在这儿有一个不小心生出来的男婴,你们想要他吗？”他们回答道:“当然!”但是我亲生母亲随后发现，我的养母从来没有上过大学,我的父亲甚至从没有读过高中。她拒绝签这个收养合同。几个月以后,当我的父母答应她一定要让我上大学的时候,她才勉强同意。这是我人生的开始。</p><p>And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out.</p><p>　　在十七岁那年,我真的上了大学。但是我很愚蠢的选择了一个几乎和你们斯坦福大学一样贵的学校, 我父母还处于蓝领阶层，他们几乎把所有积蓄都花在了我的学费上面。在六个月后, 我已经看不到其中的价值所在。我不知道我想要在生命中做什么,我也不知道大学能帮助我找到怎样的答案。</p><p>And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked far more interesting.</p><p>　　而我在这里上学，几乎花光了父母一辈子的积蓄。所以我决定退学,并且相信一切都会好起来的。当时我十分害怕, 但是现在回想一下，退学是我做过最正确的决定之一。退学的那一刻起, 我终于可以不必去读那些令我提不起丝毫兴趣的课程了，我可以去听那些看起来更有趣的课程。</p><p>It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example:</p><p>　　但是这并不是那么浪漫。我失去了我的宿舍,所以我只能在朋友房间的地板上面睡觉,我去捡5美分的可乐瓶子，仅仅为了填饱肚子, 在星期天的晚上,我需要走七英里的路程，穿过这个城市到Hare Krishna寺庙(注：位于纽约Brooklyn下城),只是为了能吃上饭——这个星期唯一一顿好一点的饭。但是我喜欢这样。我跟着我的直觉和好奇心走, 遇到的很多东西,此后被证明是无价之宝。让我给你们举一个例子吧：</p><p>Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this.</p><p>Reed大学在那时提供也许是全美最好的美术字课程。在这个大学里面的每个海报, 每个抽屉的标签上面全都是漂亮的美术字。因为我退学了, 没有受到正规的训练, 所以我决定去参加这个课程，去学学怎样写出漂亮的美术字。</p><p>I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating.</p><p>　　我学到了san serif 和serif字体, 我学会了怎么样在不同的字母组合之中改变空格的长度, 还有怎么样才能作出最棒的印刷式样。那是一种科学永远不能捕捉到的、美丽的、真实的艺术精妙, 我发现那实在是太美妙了。</p><p>None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts.</p><p>　　当时看来，这些东西好像对我的人生来说没有任何实用价值，但是十年之后,当我们在设计第一台Macintosh电脑的时候,它一下子浮现了出来。我们将这些东西全部设计进了Mac。那是第一台使用了漂亮的印刷字体的电脑。</p><p>And since Windows just copied the Mac, its likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later.</p><p>　　如果我当时没有退学, 就不会有机会去参加这个我感兴趣的美术字课程, Mac就不会有这么多丰富的字体，以及赏心悦目的字体间距。那么现在个人电脑就不会有现在这么美妙的字型了。如果我没有退学，没有旁听这门书法课，也许所有电脑都不会有如此美丽的印刷体。当然在大学的时候，我不可能预见到它们之间的联系,但是当我十年后回顾这一切的时候,一切都非常明了。</p><p>Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.</p><p>再次强调，没人可以未卜先知，事与事间的因和果，往往只在回首时显现。你得相信，因和果会在未来生活中联系起来。人总要有些信仰才行，直觉也好，命运也罢，因果轮回，不管什么，去相信因与果的联系，会给你信心去跟从自己的意愿，哪怕离经叛道，也绝不止步，只有这样，才能有所成就。</p><p><strong>[2]</strong> <strong>My second story is about love and loss.</strong></p><p>　　<strong>我的第二个故事是关于爱和损失的。</strong></p><p>I was lucky – I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30.</p><p>　　我非常幸运, 因为我在很早的时候就找到了我钟爱的东西。Woz和我在二十岁的时候就在父母的车库里面开创了苹果公司。我们工作得很努力, 十年之后, 这个公司从那两个车库中的穷光蛋发展到了超过四千名的雇员、价值超过二十亿的大公司。在公司成立的第九年,我们刚刚发布了最好的产品,那就是 Macintosh。我也快要到三十岁了。</p><p>And then I got fired. How can you get fired from a company you started？ Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating.</p><p>　　在那一年, 我被炒了鱿鱼。你怎么可能被你自己创立的公司炒了鱿鱼呢？ 嗯,在苹果快速成长的时候，我们雇用了一个很有天分的家伙和我一起管理这个公司, 在最初的几年,公司运转的很好。但是后来我们对未来的看法发生了分歧, 最终我们吵了起来。当争吵不可开交的时候, 董事会站在了他的那一边。所以在三十岁的时候, 我被炒了。在这么多人的眼皮下我被炒了。在而立之年，我生命的全部支柱离自己远去, 这真是毁灭性的打击。</p><p>I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly.</p><p>　　在最初的几个月里，我真是不知道该做些什么。我把从前的创业激情给丢了, 我觉得自己让与我一同创业的人都很沮丧。我和David Pack和Bob Boyce见面，并试图向他们道歉。</p><p>I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me – I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over.</p><p>　　我把事情弄得糟糕透顶了。但是我渐渐发现了曙光, 我仍然喜爱我从事的这些东西。苹果公司发生的这些事情丝毫的没有改变这些, 一点也没有。我被驱逐了,但是我仍然钟爱它。所以我决定从头再来。</p><p>I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life.</p><p>　　我当时没有觉察, 但是事后证明, 从苹果公司被炒是我这辈子发生的最棒的事情。因为，作为一个成功者的沉重感觉被作为一个创业者的轻松感觉所重新代替: 对任何事情都不那么特别看重。这让我觉得如此自由, 进入了我生命中最有创造力的一个阶段。</p><p>During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world.</p><p>　　在接下来的五年里, 我创立了一个名叫NeXT的公司, 还有一个叫Pixar的公司, 然后和一个后来成为我妻子的优雅女人相识。Pixar 制作了世界上第一个用电脑制作的动画电影——“玩具总动员”,Pixar现在也是世界上最成功的电脑制作工作室。</p><p>In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together.</p><p>　　在后来的一系列运转中,Apple收购了NeXT, 然后我又回到了Apple公司。我们在NeXT发展的技术在Apple的复兴之中发挥了关键的作用。我还和Laurence 一起建立了一个幸福的家庭。</p><p>I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle.</p><p>　　我可以非常肯定,如果我不被Apple开除的话, 这其中一件事情也不会发生的。这个良药的味道实在是太苦了,但是我想病人需要这个药。有时候生活会给你迎头一击，不要灰心丧气。我坚信，唯一可以让我坚持下去的，就是我对自己事业的热爱。你必须去寻找自己所爱，无论是工作还是爱情，都是如此。工作是生活中很主要的部分，真正获得满足感，就必须做你相信是有价值的工作。要做有价值的事业，你就必须热爱你做的事业，如果你还没找到，千万不要放弃，要继续寻找，只要倾听你的心声，当你真的发现时你就会感到，就像任何伟大的感情关系一样，岁月的更迭只会让这份情愈发深刻，所以千万不要放弃，要继续寻找。</p><p><strong>[3]</strong> <strong>My third story is about death.</strong></p><p>　　<strong>我的第三个故事是关于死亡的。</strong></p><p>When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today？” And whenever the answer has been “No” for too many days in a row, I know I need to change something.</p><p>　　当我十七岁的时候, 我读到了一句话:“如果你把每一天都当作生命中最后一天去生活的话,那么有一天你会发现你是正确的。”这句话给我留下了深刻的印象。从那时开始,过了33 年,我在每天早晨都会对着镜子问自己:“如果今天是我生命中的最后一天, 你会不会完成你今天想做的事情呢？”当答案连续很多次被给予“不是”的时候, 我知道自己需要改变某些事情了。</p><p>Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything – all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart.</p><p>提醒自己人的生命有限，令我一生都受益非常，令我能在人生重大问题上做出抉择。因为一切的一切，一切追求，一切荣耀，一切惶恐，一些挫折，在死亡面前都会显得微不足道 ，剩下的才是最重要的事情。记住自己总会死去是避免自己被种种担心所羁绊的最好方法，既然将一无所有，还有什么理由不追随自己的内心。</p><p>About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes.</p><p>　　大概一年以前, 我被诊断出癌症。我在早晨七点半做了一个检查, 检查清楚的显示在我的胰腺有一个肿瘤。我当时都不知道胰腺是什么东西。医生告诉我那很可能是一种无法治愈的癌症, 我还有三到六个月的时间活在这个世界上。我的医生叫我回家, 然后整理好我的一切, 那就是医生准备死亡的程序。那意味着你将要把未来十年对你小孩说的话在几个月里面说完.;那意味着把每件事情都搞定, 让你的家人会尽可能轻松的生活;那意味着你要说“再见了”。</p><p>I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now.</p><p>　　我整天和那个诊断书一起生活。后来有一天早上我作了一个活切片检查，医生将一个内窥镜从我的喉咙伸进去,通过我的胃, 然后进入我的肠子, 用一根针在我的胰腺上的肿瘤上取了几个细胞。我当时很镇静,因为我被注射了镇定剂。但是我的妻子在那里, 后来告诉我，当医生在显微镜地下观察这些细胞的时候他们开始尖叫, 因为这些细胞最后竟然是一种非常罕见的可以用手术治愈的胰腺癌症。我做了这个手术, 现在我痊愈了。</p><p>This was the closest I’ve been to facing death, and I hope its the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept:</p><p>　　那是我最接近死亡的时候, 我还希望这也是以后的几十年最接近的一次。从死亡线上又活了过来, 死亡对我来说，只是一个有用但是纯粹是知识上的概念的时候，我可以更肯定一点地对你们说：</p><p>No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true.</p><p>　　没有人愿意死, 即使人们想上天堂, 人们也不会为了去那里而死。但是死亡是我们每个人共同的终点。从来没有人能够逃脱它。也应该如此。 因为死亡就是生命中最好的一个发明。它将旧的清除以便给新的让路。你们现在是新的, 但是从现在开始不久以后, 你们将会逐渐的变成旧的然后被清除。我很抱歉这很戏剧性, 但是这十分的真实。</p><p>Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of other’s opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.</p><p>人生有限，所以不要把时间浪费在重复其他人的生活上;不要被教条束缚，那只是根据别人的思维结果而生活，不要让他人的喧嚣纷繁，淹没了自己内心的声音。最重要的是，你要有勇气去跟随你的直觉和心灵，因为它们在某种程度上已经知道你想要成为什么样子，所有其他的事情都是次要的。</p><p>When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions.</p><p>在我年轻的时候，有本很棒的叫全球目录的杂志。被我们那代人奉为经典。它是由斯图尔特·布兰德在这附近的Menlo公园创办的。他把自己的文艺气质融汇其中。那是六十年代后期。那时还没有个人电脑。全用打字机，剪刀和宝丽来照相机。它就好比是三十五年前的简装版的谷歌。充满理想主义色彩。该书简洁实用，见解独到。</p><p>Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you.</p><p><strong>Stay Hungry. Stay Foolish.</strong></p><p>Thank you all very much.</p><p>斯图尔特团队出版了几期的全球目录。当它后来要停刊的时候，他们出来最后一版。那是七十年代中期，我就像你们这么大。杂志最后一期的封底上，是一幅清晨乡村公路的照片。是那种搭车旅行玩冒险时会遇到的村路，照片下面有这样一段话：求知若渴，虚心若愚。这是他们停刊的告别语。求知若渴，虚心若愚。我一直以此激励自己。在你们即将毕业开始崭新旅程的时刻，我希望你们也能做到：</p><p><strong>求知若渴，虚心若愚。</strong></p><p>谢谢大家！</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;The-speech-of-Steve-Jobs&quot;&gt;&lt;a href=&quot;#The-speech-of-Steve-Jobs&quot; class=&quot;headerlink&quot; title=&quot;The speech of Steve Jobs&quot;&gt;&lt;/a&gt;The speech of Steve Jobs&lt;/h1&gt;&lt;p&gt;this is used to learn English&lt;/p&gt;</summary>
    
    
    
    
    <category term="Engliash" scheme="http://example.com/tags/Engliash/"/>
    
  </entry>
  
</feed>
